{"ast":null,"code":"var _jsxFileName = \"/Users/quintenvanbreugel/Workspace/amazingcosmosapp/src/components/CenteredTree.js\";\nimport React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { Redirect } from \"react-router-dom\";\nconst containerStyles = {\n  width: \"100%\",\n  height: \"100vh\"\n};\nexport default class CenteredTree extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.renderRedirect = () => {\n      if (redirectApproved) {\n        return React.createElement(Redirect, {\n          to: {\n            pathName: \"details\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translate: {\n        x: dimensions.width / 2,\n        y: 50\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: containerStyles,\n      ref: tc => this.treeContainer = tc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Tree, {\n      data: this.props.data,\n      translate: this.state.translate,\n      orientation: \"vertical\",\n      collapsible: false,\n      onClick: renderRedirect,\n      styles: {\n        nodes: {\n          node: {\n            circle: {\n              fill: \"red\"\n            }\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/quintenvanbreugel/Workspace/amazingcosmosapp/src/components/CenteredTree.js"],"names":["React","Tree","Redirect","containerStyles","width","height","CenteredTree","PureComponent","state","renderRedirect","redirectApproved","pathName","componentDidMount","dimensions","treeContainer","getBoundingClientRect","setState","translate","x","y","render","tc","props","data","nodes","node","circle","fill"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAE,MADe;AAEtBC,EAAAA,MAAM,EAAE;AAFc,CAAxB;AAKA,eAAe,MAAMC,YAAN,SAA2BN,KAAK,CAACO,aAAjC,CAA+C;AAAA;AAAA;AAAA,SAC5DC,KAD4D,GACpD,EADoD;;AAAA,SAa5DC,cAb4D,GAa3C,MAAM;AACrB,UAAIC,gBAAJ,EAAsB;AACpB,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEC,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KAjB2D;AAAA;;AAG5DC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,UAAU,GAAG,KAAKC,aAAL,CAAmBC,qBAAnB,EAAnB;AACA,SAAKC,QAAL,CAAc;AACZC,MAAAA,SAAS,EAAE;AACTC,QAAAA,CAAC,EAAEL,UAAU,CAACT,KAAX,GAAmB,CADb;AAETe,QAAAA,CAAC,EAAE;AAFM;AADC,KAAd;AAMD;;AAQDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAEjB,eAAZ;AAA6B,MAAA,GAAG,EAAEkB,EAAE,IAAK,KAAKP,aAAL,GAAqBO,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,IADnB;AAEE,MAAA,SAAS,EAAE,KAAKf,KAAL,CAAWS,SAFxB;AAGE,MAAA,WAAW,EAAE,UAHf;AAIE,MAAA,WAAW,EAAE,KAJf;AAKE,MAAA,OAAO,EAAER,cALX;AAME,MAAA,MAAM,EAAE;AACNe,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,IAAI,EAAE;AAAR;AAAV;AAAR;AADD,OANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAcD;;AAlC2D","sourcesContent":["import React from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { Redirect } from \"react-router-dom\";\n\nconst containerStyles = {\n  width: \"100%\",\n  height: \"100vh\"\n};\n\nexport default class CenteredTree extends React.PureComponent {\n  state = {};\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translate: {\n        x: dimensions.width / 2,\n        y: 50\n      }\n    });\n  }\n\n  renderRedirect = () => {\n    if (redirectApproved) {\n      return <Redirect to={{ pathName: \"details\" }} />;\n    }\n  };\n\n  render() {\n    return (\n      <div style={containerStyles} ref={tc => (this.treeContainer = tc)}>\n        <Tree\n          data={this.props.data}\n          translate={this.state.translate}\n          orientation={\"vertical\"}\n          collapsible={false}\n          onClick={renderRedirect}\n          styles={{\n            nodes: { node: { circle: { fill: \"red\" } } }\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}